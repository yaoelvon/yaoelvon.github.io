<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>技术洞见</title>
  <subtitle>疑而能问，已得知识之半。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yaofeng.org/"/>
  <updated>2017-05-06T15:48:25.000Z</updated>
  <id>http://yaofeng.org/</id>
  
  <author>
    <name>冯尧</name>
    <email>yaoelvon@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker启动镜像时，运行可执行文件报&quot;permission denied&quot;</title>
    <link href="http://yaofeng.org/2017/05/04/docker-run-raise-exception-permission-denied/"/>
    <id>http://yaofeng.org/2017/05/04/docker-run-raise-exception-permission-denied/</id>
    <published>2017-05-04T05:05:59.000Z</published>
    <updated>2017-05-06T15:48:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>错误信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2017-04-28 17:38:20:docker: &#123;&quot;message&quot;:&quot;containerd: container not started&quot;&#125;</div><div class="line">2017-04-28 17:38:26:container_linux.go:247: starting container process caused &quot;exec: \&quot;/IntelliJ/license_server\&quot;: permission denied&quot;</div></pre></td></tr></table></figure></p>
<p>解决方案：<br>在Dockerfile中增加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RUN chmod +x ./license_server</div></pre></td></tr></table></figure></p>
<p>参考：<br><a href="https://github.com/facebook/fbctf/issues/431" target="_blank" rel="external">https://github.com/facebook/fbctf/issues/431</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;错误信息：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ng-admin介绍</title>
    <link href="http://yaofeng.org/2016/11/21/ng-admin-introduction/"/>
    <id>http://yaofeng.org/2016/11/21/ng-admin-introduction/</id>
    <published>2016-11-21T11:29:01.000Z</published>
    <updated>2017-05-06T09:47:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>写在前面：本文档翻译自ng-admin 0.91版本。</p>
<p>使用ng-admin配合RESTFul风格的后端API可以马上得到一个完整的管理界面，功能包括：数据表格（datagrid）、过滤器（filters）、复杂的表单控件（complex form widgets）、多模型关系（multi-model relationships）和仪表盘/概览（dashboard）。它不仅仅拥有简单的增删该查（CRUD）功能，在不影响其他开发进度的情况下，ng-admin能够很快帮助你构建一个复杂的图形用户界面。</p>
<ul>
<li><a href="http://marmelab.com/ng-admin-demo/#/dashboard" target="_blank" rel="external">在线例子</a>(<a href="https://github.com/marmelab/ng-admin-demo" target="_blank" rel="external">例子源码</a>)</li>
<li><a href="http://ng-admin-book.marmelab.com/" target="_blank" rel="external">英文文档</a></li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>当前的ng-admin版本（master分支）基于Angular.js 1.4。如果你需要兼容Angular 1.3，请使用ng-admin 0.9。</p>
<p>使用包管理工具npm或bower获取ng-admin：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install ng-admin —save</div><div class="line"><span class="comment"># 或</span></div><div class="line">bower install ng-admin —save</div></pre></td></tr></table></figure>
<p>将库文件ng-admin.min.css和ng-admin.min.js添加到HTML中，然后在<code>&lt;body&gt;&lt;/body&gt;中</code>增加<code>&lt;div ui-view&gt;</code>，最后对admin进行配置：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">“en”</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My First Admin<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">“stylesheet”</span> <span class="attr">href</span>=<span class="string">“node_modules/ng-admin/build/ng-admin.min.css”</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">“myApp”</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-view</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">“node_modules/ng-admin/build/ng-admin.min.js”</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">“text/javascript”</span>&gt;</span><span class="undefined"></span></div><div class="line">    var myApp = angular.module(‘myApp’, [‘ng-admin’]);</div><div class="line">    myApp.config([‘NgAdminConfigurationProvider’, function(NgAdminConfigurationProvider) &#123;</div><div class="line">        var nga = NgAdminConfigurationProvider;</div><div class="line">        // 创建一个管理应用</div><div class="line">        var admin = nga.application(‘My First Admin’);</div><div class="line">        // 之后的更多配置</div><div class="line">        // ...</div><div class="line">        // 将管理应用连接到DOM中，然后运行它</div><div class="line">        nga.configure(admin);</div><div class="line">    &#125;]);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="入门getting-started"><a href="#入门（Getting-Started）" class="headerlink" title="入门（Getting Started）"></a>入门（Getting Started）</h2><p>如果是初次接触ng-admin，请仔细阅读章节<a href="入门.md">入门</a>。</p>
<h2 id="用法示例usage-examples"><a href="#用法示例（Usage-Examples）" class="headerlink" title="用法示例（Usage Examples）"></a>用法示例（Usage Examples）</h2><ul>
<li>在<a href="http://ng-admin.marmelab.com/#/dashboard" target="_blank" rel="external">博客管理示例</a>(<a href="examples/blog/config.js">源码</a>)中，你能看到一个简单的配置，里面的实体（entities)有发帖(posts)、评论（comments)和标签（tags）。同时使用FakeRest在浏览器中模拟后端REST API。</li>
<li><a href="http://marmelab.com/ng-admin-demo/" target="_blank" rel="external">Posters Galore demo</a> (<a href="https://github.com/marmelab/ng-admin-demo" target="_blank" rel="external">source</a>) 是一个更完整的电子商务管理页面，包含自定义认证、页面、指令和模块，并使用WebPack组织良好。同时使用<a href="https://github.com/marmelab/FakeRest" target="_blank" rel="external">FakeRest</a>在浏览器中模拟后端REST API。</li>
</ul>
<h2 id="配置参考configuration-reference"><a href="#配置参考（Configuration-Reference）" class="headerlink" title="配置参考（Configuration Reference）"></a>配置参考（Configuration Reference）</h2><p>在ng-admin中，一个管理工具是由包含多个<em>实体（entities)</em>的<em>应用</em>组成。每个实体（entity)拥有5种<em>视图</em>，每个视图拥有很多<em>字段（fields）</em>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">application</div><div class="line"> |-header</div><div class="line"> |-menu</div><div class="line"> |-dashboard</div><div class="line"> |-entity[]</div><div class="line">    |-creationView</div><div class="line">    |-editionView</div><div class="line">    |-deletionView</div><div class="line">    |-showView</div><div class="line">    |-listView</div><div class="line">        |-field[]</div><div class="line">           |-name</div><div class="line">           |-type</div></pre></td></tr></table></figure>
<p>有关更多详细信息，请参阅<a href="配置API参考.md">配置API参考</a>专用章节。</p>
<p><strong>提示</strong>:您在ng-admin项目中将找不到相关的类。 实际上，管理配置API有一个独立、框架无关的库，称为<a href="https://github.com/marmelab/admin-config" target="_blank" rel="external">admin-config</a>。 不要犹豫，浏览该库的代码以了解更多。</p>
<h2 id="关联relationships"><a href="#关联（Relationships）" class="headerlink" title="关联（Relationships）"></a>关联（Relationships）</h2><p>Ng-admin的读写视图实体之间支持‘关联’。它提供了特定的字段类型来实现这些‘关联’：<code>reference</code>, <code>referenced_list</code>, <code>reference_many</code>, 和 <code>embedded_list</code>。<a href="关联.md">关联参考章节</a>中使用例子描述了更多的字段类型。</p>
<p>另外，<a href="配置API参考.md">配置API参考章节</a>的字段部分具有所有字段类型的列表。</p>
<h2 id="菜单配置menu-configuration"><a href="#菜单配置（Menu-Configuration）" class="headerlink" title="菜单配置（Menu Configuration）"></a>菜单配置（Menu Configuration）</h2><p>默认情况下，ng-admin创建一个侧边栏菜单，每个实体有一个条目。 如果要自定义侧边栏（标签，图标，顺序，添加子菜单等），则必须手动定义菜单。</p>
<p>请参见<a href="菜单配置.md">菜单配置</a>专用章节。</p>
<h2 id="仪表板配置dashboard-configuration"><a href="#仪表板配置（Dashboard-Configuration）" class="headerlink" title="仪表板配置（Dashboard Configuration）"></a>仪表板配置（Dashboard Configuration）</h2><p>ng-admin应用程序的主页被称为仪表板。 使用它向最终用户显示重要的信息，例如最新条目或图表。</p>
<p>请参阅<a href="仪表板配置.md">仪表板配置</a>专用章节。</p>
<h2 id="定制api映射customizing-the-api-mapping"><a href="#定制API映射（Customizing-the-API-Mapping）" class="headerlink" title="定制API映射（Customizing the API Mapping）"></a>定制API映射（Customizing the API Mapping）</h2><p>ng-admin对REST API所做的所有HTTP请求都是由<a href="https://github.com/mgonto/restangular" target="_blank" rel="external">Restangular</a>执行的。</p>
<p>REST规范没有提供足够的详细信息来涵盖管理GUI的所有需求。 ng-admin对如何设计您的API进行了一些假设。 所有这些假设都可以通过<a href="https://github.com/mgonto/restangular#addresponseinterceptor" target="_blank" rel="external">Restangular的请求和响应拦截器</a>来覆盖。</p>
<p>这意味着你不需要为了ng-admin而调整你的API; ng-admin可以适应任何REST API，这要归功于Restangular的灵活性。</p>
<p>请参阅<a href="定制API映射.md">定制API映射</a>专用章节。</p>
<h2 id="主题theming"><a href="#主题（Theming）" class="headerlink" title="主题（Theming）"></a>主题（Theming）</h2><p>你可以在不同的级别覆盖几乎所有ng-admin生成的HTML。</p>
<p>参见<a href="主题.md">主题</a>专门章节。</p>
<h2 id="添加自定义页面adding-custom-pages"><a href="#添加自定义页面（Adding-Custom-Pages）" class="headerlink" title="添加自定义页面（Adding Custom Pages）"></a>添加自定义页面（Adding Custom Pages）</h2><p>对于每个实体，ng-admin创建用于’创建’，’检索’，’更新’和’删除’（CRUD）此实体的必要页面。 当您需要在实体上实现更特定的操作时，您必须添加自定义页面，例如要求向一个电子邮件地址发送消息的页面。 如何路由到特定页面并在ng-admin布局中显示它？</p>
<p>请参阅<a href="添加自定义页面.md">添加自定义页面</a>专用章节。</p>
<h2 id="添加自定义类型adding-custom-types"><a href="#添加自定义类型（Adding-Custom-Types）" class="headerlink" title="添加自定义类型（Adding Custom Types）"></a>添加自定义类型（Adding Custom Types）</h2><p>当您在REST API的响应信息和ng-admin之间映射字段时，您需要为其指定类型。 这个类型会确定如何显示和编辑这些数据。 自定义现有的ng-admin类型和添加新的ng-admin类型非常容易。</p>
<p>请参阅<a href="添加自定义页面.md">添加自定义类型</a>专用章节。</p>
<h2 id="生产准备getting-ready-for-production"><a href="#生产准备（Getting-Ready-For-Production）" class="headerlink" title="生产准备（Getting Ready For Production）"></a>生产准备（Getting Ready For Production）</h2><p>要构建具有所需依赖关系的ng-admin源，并获得关于性能提升的提示，请参阅<a href="生产准备.md">生产准备</a>专用章节。</p>
<h2 id="信息news"><a href="#信息（News）" class="headerlink" title="信息（News）"></a>信息（News）</h2><p>关于ng-admin（教程，插件，新版本等）的新闻，请按照<a href="http://marmelab.com/blog/" target="_blank" rel="external">marmelab博客</a>。</p>
<p>您还应该观看<a href="https://github.com/marmelab/ng-admin/releases" target="_blank" rel="external">gitHub上的ng-admin发布页面</a>以获取有关新发布的公告以及完成更新日志。</p>
<h2 id="支持support"><a href="#支持（Support）" class="headerlink" title="支持（Support）"></a>支持（Support）</h2><p>Ng-admin是一个开源项目，并且社区越来越大。 您可以通过在以下任何渠道询求帮助：</p>
<ul>
<li><a href="http://stackoverflow.com/questions/tagged/ng-admin" target="_blank" rel="external">StackOverflow</a></li>
<li>Gitter (live chat)](<a href="https://gitter.im/marmelab/ng-admin" target="_blank" rel="external">https://gitter.im/marmelab/ng-admin</a>) <a href="https://gitter.im/marmelab/ng-admin?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" target="_blank" rel="external"><img src="https://badges.gitter.im/Join%20Chat.svg" alt="Join the chat at https://gitter.im/marmelab/ng-admin"></a></li>
</ul>
<p>请尽可能多地提供上下文，包括和管理配置的代码段，以及您映射的API的响应。</p>
<h2 id="贡献contributing"><a href="#贡献（Contributing）" class="headerlink" title="贡献（Contributing）"></a>贡献（Contributing）</h2><p>在您的特定环境中的使用ng-admin的反馈是有价值的，不要犹豫<a href="https://github.com/marmelab/ng-admin/issues" target="_blank" rel="external">打开GitHub的issue</a>提出任何你想问的问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写在前面：本文档翻译自ng-admin 0.91版本。&lt;/p&gt;
&lt;p&gt;使用ng-admin配合RESTFul风格的后端API可以马上得到一个完整的管理界面，功能包括：数据表格（datagrid）、过滤器（filters）、复杂的表单控件（complex form widge
    
    </summary>
    
      <category term="ng-admin" scheme="http://yaofeng.org/categories/ng-admin/"/>
    
    
      <category term="ng-admin" scheme="http://yaofeng.org/tags/ng-admin/"/>
    
  </entry>
  
  <entry>
    <title>MySQL小贴士</title>
    <link href="http://yaofeng.org/2016/09/11/some-tips-of-MySQL/"/>
    <id>http://yaofeng.org/2016/09/11/some-tips-of-MySQL/</id>
    <published>2016-09-11T12:21:56.000Z</published>
    <updated>2017-05-06T09:47:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1创建数据库时一定要设置字符编码格式"><a href="#1-创建数据库时，一定要设置字符编码格式" class="headerlink" title="1.创建数据库时，一定要设置字符编码格式"></a>1.创建数据库时，一定要设置字符编码格式</h2><p>刚开始的使用mysql的小白（比如博主），经常会碰到这样的情况，将中文存入数据库后显示的都是？？，而且长度相同的中文就unique字段就会提示：duplicate（重复了）。WTF？到底发生了什么？<br>以上就是博主从windows平台切到mac后，开始配置mysql环境时碰到的问题。花了几个晚上的时间，搜索stackoverflow等境外网站，在代码中创表时加上各种设置字符集的方法，还有修改电脑的本地配置文件，设置了一堆，愣是没有解决。。<br>后来是被公司的倩神（纯爷么）一语惊醒：你数据库字符集设了没有？。。。。。。。。。我瞬间想到stackoverflow上的一个回答。。就是创建数据库时设置字符集的方法，当时看到了，但也仅仅是看到，就直接忽略过去（也有原因是英文的，没完全懂）。<br>真的想哭，不多说了，上mysql命令。</p>
<p>（1）如果你是新创建数据库，可以使用一下方式设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CREATE DATABASE 数据库名 DEFAULT CHARACTER SET UTF8 DEFAULT COLLATE utf8_general_ci;</div></pre></td></tr></table></figure></p>
<p>（2）如果你的数据库已经创建了，可以通过修改字符集的方式解决（不推荐，可能会引发不明确的问题）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ALTER DATABASE databasename CHARACTER SET utf8 COLLATE utf8_general_ci;</div></pre></td></tr></table></figure></p>
<h2 id="2mysql数据库中的数据是可以被dump出来随处恢复的"><a href="#2-mysql数据库中的数据是可以被dump出来，随处恢复的" class="headerlink" title="2.mysql数据库中的数据是可以被dump出来，随处恢复的"></a>2.mysql数据库中的数据是可以被dump出来，随处恢复的</h2><p>就拿我所在的项目组来说吧，如果你要对系统进行流程测试。之前的做法是：初始化初始数据-》使用excel表格导入各种数据到系统中-》然后再开始测试。这样做有三个缺点：1.效率低；2.excel表格需要具有一致性，若某些数据被修改过，会导入失败；3.数据量小，无法完全暴露问题。<br>现在有了dump神器，可以将某些客户的现场数据dump出来（当然，用户数据是不会外泄的，只是测试，只是测试，只是测试），直接在数据库中进行恢复。<br>dump的方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">time=$(date +%Y-%m-%dT%H:%M:%S)</div><div class="line">mysqldump -h &lt;服务器地址&gt; -P &lt;端口号&gt; -u &lt;用户名&gt; -p&lt;密码&gt; &lt;数据库名&gt; &gt; $time.dump</div><div class="line">ps:本地可以不填服务器地址，但是端口号要填，默认是3306（如果不填，dump命令会阻塞，ctrl-C 无法退出）</div></pre></td></tr></table></figure></p>
<p>恢复方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -h &lt;服务器地址&gt; -P &lt;端口号&gt;  -u &lt;用户名&gt; -p &lt;数据库名称&gt; &lt; mysql.dump</div></pre></td></tr></table></figure></p>
<h2 id="3-在mysql中如何复制一行数据同时使用新的id插入到数据库中"><a href="#3-在mysql中如何复制一行数据，同时使用新的id插入到数据库中" class="headerlink" title="3. 在mysql中如何复制一行数据，同时使用新的id插入到数据库中"></a>3. 在mysql中如何复制一行数据，同时使用新的id插入到数据库中</h2><p>具体当时为什么需要这个功能，博主已经忘了，直接上命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">insert into my_table( col1, col2 ) select col1, col2 from my_table where pk_id=?;</div></pre></td></tr></table></figure></p>
<h2 id="4在mac上python代码连接mysql时提示no-module-named-mysqldb怎么解决"><a href="#4-在mac上，python代码连接MySQL时，提示No-module-named-MySQLdb，怎么解决" class="headerlink" title="4.在mac上，python代码连接MySQL时，提示No module named MySQLdb，怎么解决"></a>4.在mac上，python代码连接MySQL时，提示No module named MySQLdb，怎么解决</h2><p>这个问题，你需要确认两件事。<br>（1）代码中数据库连接的url需要特殊设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SQLALCHEMY_DATABASE_URI = &apos;mysql+pymysql://.....&apos;</div></pre></td></tr></table></figure></p>
<p>（2）需要安装python中操作mysql的库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install mysql-python</div></pre></td></tr></table></figure></p>
<h2 id="5安装mysql571的坑"><a href="#5-安装mysql5-7-1的坑" class="headerlink" title="5.安装mysql5.7.1的坑"></a>5.安装mysql5.7.1的坑</h2><p>5.6以前的MySQL安装后，默认是没有密码的，第一次登录时设置密码。这是博主一贯以为的。但是在mac上安装5.7.1时，遇到了坑。因为新的版本中，密码是安装过程中弹窗告诉我们的。而当时，博主并没有关系什么弹窗，直接没看就关闭了。导致第一次登录一直提示密码错误。<br>后来在网上某个csdn博客中讲到了这一点。然后博主就滚回去重装了。</p>
<h2 id="6其他一些常用的命令"><a href="#6-其他一些常用的命令" class="headerlink" title="6.其他一些常用的命令"></a>6.其他一些常用的命令</h2><p>查看表的结构：show create table 表名;<br>删除一行特定数据行：delete from 表名 where id = 1;</p>
<p>参考：<br>1.<a href="http://stackoverflow.com/questions/11331573/mysql-copy-row-but-with-new-id" target="_blank" rel="external">mysql-copy-row-but-with-new-id</a><br>2.<a href="http://stackoverflow.com/questions/454854/no-module-named-mysqldb" target="_blank" rel="external">No module named MySQLdb</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1创建数据库时一定要设置字符编码格式&quot;&gt;&lt;a href=&quot;#1-创建数据库时，一定要设置字符编码格式&quot; class=&quot;headerlink&quot; title=&quot;1.创建数据库时，一定要设置字符编码格式&quot;&gt;&lt;/a&gt;1.创建数据库时，一定要设置字符编码格式&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
      <category term="mysql" scheme="http://yaofeng.org/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://yaofeng.org/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>使用angularjs时,如何配置所有的$http requests的headers,增加自定义信息?</title>
    <link href="http://yaofeng.org/2016/08/06/custom-headers-of-request-at-AngularJS/"/>
    <id>http://yaofeng.org/2016/08/06/custom-headers-of-request-at-AngularJS/</id>
    <published>2016-08-06T08:25:25.000Z</published>
    <updated>2017-05-06T09:47:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近想要在前端所有的请求头中增加信息, 在实现过程中遇到了一些坑。下面记录了遇到的一些坑。如有疏漏,请轻喷~</p>
<h2 id="1restangularprovidersetdefaultheaders和httpdefaultsheaderscommonauthorization的区别"><a href="#1-RestangularProvider-setDefaultHeaders和-http-defaults-headers-common-‘Authorization’-的区别" class="headerlink" title="1.RestangularProvider.setDefaultHeaders和$http.defaults.headers.common[‘Authorization’]的区别"></a>1.RestangularProvider.setDefaultHeaders和$http.defaults.headers.common[‘Authorization’]的区别</h2><blockquote>
<p>RestangularProvider.setDefaultHeaders只对使用Rectangular的请求有效；<br>$http.defaults.headers.common对所有使用$http的请求有效；<br>由于Rectangular底层用的也是$http，所以$http.defaults.headers.common对Restangular的请求也生效；</p>
</blockquote>
<h2 id="2httpdefaultsheaderscommonauthorization如何使用"><a href="#2-http-defaults-headers-common-‘Authorization’-如何使用？" class="headerlink" title="2.$http.defaults.headers.common[‘Authorization’]如何使用？"></a>2.$http.defaults.headers.common[‘Authorization’]如何使用？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">app.run([&apos;$http&apos;, function ($http) &#123;</div><div class="line">    $http.defaults.headers.common[&apos;Authorization&apos;] = &apos;Basic d2VudHdvcnRobWFuOkNoYW5nZV9tZQ==&apos;;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<p>存在问题：这个头部很容易丢失；</p>
<h2 id="3使用http拦截器"><a href="#3-使用-http拦截器" class="headerlink" title="3.使用$http拦截器"></a>3.使用$http拦截器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">myapp.factory(&apos;httpRequestInterceptor&apos;, function () &#123;</div><div class="line">  return &#123;</div><div class="line">    request: function (config) &#123;</div><div class="line"></div><div class="line">      config.headers[&apos;Authorization&apos;] = &apos;Basic d2VudHdvcnRobWFuOkNoYW5nZV9tZQ==&apos;;</div><div class="line">      return config;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">myapp.config(function ($httpProvider) &#123;</div><div class="line">  $httpProvider.interceptors.push(&apos;httpRequestInterceptor&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="4使用angular-file-upload的坑"><a href="#4-使用angular-file-upload的坑" class="headerlink" title="4.使用angular-file-upload的坑"></a>4.使用angular-file-upload的坑</h2><p>当使用angular-file-upload进行数据导入时，使用httpRequestInterceptor在headers中增加Token信息是无效的；<br>因为angular-file_upload不适用$http的服务，它使用原生的javascript XHR对象。<br>或许未来会支持$http服务，但是现在并不支持。现在只能在upload对象上直接添加headers信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var uploader = new FileUploader();</div><div class="line">uploader.headers[&quot;Authorization&quot;] = &quot;Bearer &quot; + tokenInfo.accessToken;</div></pre></td></tr></table></figure></p>
<h2 id="5推荐angularjs库"><a href="#5-推荐angularjs库" class="headerlink" title="5.推荐angularjs库"></a>5.推荐angularjs库</h2><p>①angular-jwt，帮助你在angularjs中使用JWT进行安全认证；<br>②angular-file-upload，帮助你在angularjs中上传文件；</p>
<h2 id="6参考资料"><a href="#6-参考资料：" class="headerlink" title="6.参考资料："></a>6.参考资料：</h2><p>1.<a href="http://stackoverflow.com/questions/24994783/restangularprovider-setdefaultheaders-vs-http-defaults-headers-commonauthoriz" target="_blank" rel="external">RestangularProvider.setDefaultHeaders和$http.defaults.headers.common[‘Authorization’]有什么区别</a><br>2.<a href="http://stackoverflow.com/questions/29944997/angularjs-http-custom-header-for-all-requests" target="_blank" rel="external">在angularjs中为所有的请求自定义headers</a><br>3.<a href="https://github.com/nervgh/angular-file-upload/issues/92" target="_blank" rel="external">在angular-file-upload中如何为request增加自定义的headers</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近想要在前端所有的请求头中增加信息, 在实现过程中遇到了一些坑。下面记录了遇到的一些坑。如有疏漏,请轻喷~&lt;/p&gt;
&lt;h2 id=&quot;1restangularprovidersetdefaultheaders和httpdefaultsheaderscommonauthori
    
    </summary>
    
      <category term="javascript" scheme="http://yaofeng.org/categories/javascript/"/>
    
    
      <category term="js" scheme="http://yaofeng.org/tags/js/"/>
    
      <category term="angularjs" scheme="http://yaofeng.org/tags/angularjs/"/>
    
  </entry>
  
  <entry>
    <title>DNS原理入门</title>
    <link href="http://yaofeng.org/2016/07/17/Introduction-to-DNS-principle/"/>
    <id>http://yaofeng.org/2016/07/17/Introduction-to-DNS-principle/</id>
    <published>2016-07-17T08:05:20.000Z</published>
    <updated>2017-05-06T09:47:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>DNS是互联网核心协议之一。</p>
<h1 id="一-dns是什么"><a href="#一、DNS是什么？" class="headerlink" title="一、DNS是什么？"></a>一、DNS是什么？</h1><p>DNS（Domain Name System）的作用非常简单，就是根据域名查出IP地址。你可以把它想象成一本巨大的电话本。</p>
<p>如果你想要访问域名fengyao.me，首先要通过DNS查出它的IP地址是192.30.252.154。</p>
<h1 id="二-查询过程"><a href="#二、查询过程" class="headerlink" title="二、查询过程"></a>二、查询过程</h1><p>虽然只需要返回一个IP地址，但是DNS的查询过程非常复杂，分成多个步骤。工具dig可以显示整个查询过程。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$dig fengyao.me</div></pre></td></tr></table></figure>
<p>上面的命令会输出六段信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">; &lt;&lt;&gt;&gt; DiG 9.8.3-P1 &lt;&lt;&gt;&gt; fengyao.me</div><div class="line">;; global options: +cmd</div><div class="line">;; Got answer:</div><div class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 1980</div><div class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 2, ADDITIONAL: 6</div><div class="line"></div><div class="line">;; QUESTION SECTION:</div><div class="line">;fengyao.me.            IN    A</div><div class="line"></div><div class="line">;; ANSWER SECTION:</div><div class="line">fengyao.me.        3454    IN    A    192.30.252.154</div><div class="line">fengyao.me.        3454    IN    A    192.30.252.153</div><div class="line"></div><div class="line">;; AUTHORITY SECTION:</div><div class="line">fengyao.me.        86254    IN    NS    dns10.hichina.com.</div><div class="line">fengyao.me.        86254    IN    NS    dns9.hichina.com.</div><div class="line"></div><div class="line">;; ADDITIONAL SECTION:</div><div class="line">dns9.hichina.com.    3040    IN    A    42.120.221.13</div><div class="line">dns9.hichina.com.    3040    IN    A    140.205.81.13</div><div class="line">dns9.hichina.com.    3040    IN    A    140.205.228.13</div><div class="line">dns10.hichina.com.    85275    IN    A    140.205.81.23</div><div class="line">dns10.hichina.com.    85275    IN    A    140.205.228.23</div><div class="line">dns10.hichina.com.    85275    IN    A    42.120.221.23</div><div class="line"></div><div class="line">;; Query time: 6 msec</div><div class="line">;; SERVER: 192.168.3.1#53(192.168.3.1)</div><div class="line">;; WHEN: Sun Jul 17 14:29:36 2016</div><div class="line">;; MSG SIZE  rcvd: 206</div></pre></td></tr></table></figure>
<p>第一段是查询参数和统计：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">; &lt;&lt;&gt;&gt; DiG 9.8.3-P1 &lt;&lt;&gt;&gt; fengyao.me</div><div class="line">;; global options: +cmd</div><div class="line">;; Got answer:</div><div class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 1980</div><div class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 2, ADDITIONAL: 6</div></pre></td></tr></table></figure>
<p>第二段是查询内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">;; QUESTION SECTION:</div><div class="line">;fengyao.me.            IN    A</div></pre></td></tr></table></figure>
<p>上面结果显示，查询域名fengyao.me的A记录，A是address的缩写。</p>
<p>第三段是DNS服务器的答复。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">;; ANSWER SECTION:</div><div class="line">fengyao.me.        3454    IN    A    192.30.252.154</div><div class="line">fengyao.me.        3454    IN    A    192.30.252.153</div></pre></td></tr></table></figure>
<p>上面结果显示，fengyao.me有两个A记录，即两个IP地址。3454是TTL值（Time to live的缩写），表示缓存时间，即3454秒之内不用重新查询。</p>
<p>第四段表示fengyao.me的NS记录（Name Server的缩写），即哪些服务器负责管理fengyao.me的DNS记录。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">;; AUTHORITY SECTION:</div><div class="line">fengyao.me.        86254    IN    NS    dns10.hichina.com.</div><div class="line">fengyao.me.        86254    IN    NS    dns9.hichina.com.</div></pre></td></tr></table></figure>
<p>上面结果显示fengyao.me共有两条NS记录，即两个域名服务器，向其中任一台查询就知道fengyao.me的IP地址是什么。</p>
<p>第五段是上面两个域名服务器的IP地址，这是随着前一段一起返回的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">;; ADDITIONAL SECTION:</div><div class="line">dns9.hichina.com.    3040    IN    A    42.120.221.13</div><div class="line">dns9.hichina.com.    3040    IN    A    140.205.81.13</div><div class="line">dns9.hichina.com.    3040    IN    A    140.205.228.13</div><div class="line">dns10.hichina.com.    85275    IN    A    140.205.81.23</div><div class="line">dns10.hichina.com.    85275    IN    A    140.205.228.23</div><div class="line">dns10.hichina.com.    85275    IN    A    42.120.221.23</div></pre></td></tr></table></figure>
<p>第六段是DNS服务器的一些传输信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">;; Query time: 6 msec</div><div class="line">;; SERVER: 192.168.3.1#53(192.168.3.1)</div><div class="line">;; WHEN: Sun Jul 17 14:29:36 2016</div><div class="line">;; MSG SIZE  rcvd: 206</div></pre></td></tr></table></figure>
<p>上面的结果显示，本机的DNS服务器是192.168.3.1，查询端口是53（DNS服务器的默认端口），以及回应长度是206字节。</p>
<p>如果不想看这么多内容，可以使用+short参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ dig +short fengyao.me</div><div class="line">192.30.252.153</div><div class="line">192.30.252.154</div></pre></td></tr></table></figure>
<p>上面命令只返回fengyao.me对应的两个IP地址（即A记录）。</p>
<h1 id="三-dns服务器"><a href="#三、DNS服务器" class="headerlink" title="三、DNS服务器"></a>三、DNS服务器</h1><p>下面我会根据前面这个例子，一步步还原，本机到底是怎么得到域名fengyao.me的IP地址。<br>首先，本机一定要知道DNS服务器的IP地址，否则上不了网。通过DNS服务器，才能知道某个域名的IP地址到底是什么。</p>
<p>DNS服务器的IP地址，有可能是动态的，每次上网时由网关分配，这叫做DHCP机制；也有可能是事先指定的固定地址。Linux系统中里面，DNS服务器的IP地址保存在/etc/resolv.conf文件。</p>
<p>上面的DNS服务器是192.168.3.1，这是一个内网地址。有一些公网的DNS服务器，也可以使用，其中最有名的就是google的8.8.8.8和Level 3的4.2.2.2.</p>
<p>本机只向自己的DNS服务器查询，dig命令有一个@参数，显示向其他DNS服务器查询的结果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ dig @4.2.2.2 fengyao.me</div></pre></td></tr></table></figure>
<p>上面的指令向DNS服务器4.2.2.2查询：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">; &lt;&lt;&gt;&gt; DiG 9.8.3-P1 &lt;&lt;&gt;&gt; @4.2.2.2 fengyao.me</div><div class="line">; (1 server found)</div><div class="line">;; global options: +cmd</div><div class="line">;; Got answer:</div><div class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 39511</div><div class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 0</div><div class="line"></div><div class="line">;; QUESTION SECTION:</div><div class="line">;fengyao.me.            IN    A</div><div class="line"></div><div class="line">;; ANSWER SECTION:</div><div class="line">fengyao.me.        600    IN    A    192.30.252.153</div><div class="line">fengyao.me.        600    IN    A    192.30.252.154</div><div class="line"></div><div class="line">;; Query time: 626 msec</div><div class="line">;; SERVER: 4.2.2.2#53(4.2.2.2)</div><div class="line">;; WHEN: Sun Jul 17 14:45:27 2016</div><div class="line">;; MSG SIZE  rcvd: 60</div></pre></td></tr></table></figure>
<h1 id="四-域名的层级"><a href="#四、域名的层级" class="headerlink" title="四、域名的层级"></a>四、域名的层级</h1><p>DNS服务器怎么会知道每个域名的IP地址呢？答案是分级查询。<br>请仔细看前面的例子，每个域名的尾部都多了一个点。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">;; QUESTION SECTION:</div><div class="line">;fengyao.me.            IN    A</div></pre></td></tr></table></figure>
<p>比如，域名fengyao.me显示为fengyao.me.。<br>这不是疏忽，而是所有域名的尾部，实际上都有一个根域名。</p>
<p>举例来说，www.example.com真正的域名是www.example.com.root，所以简写为www.example.com.。因为，根域名.root对于所有域名都是一样，所以平时是省略的。</p>
<p>根域名的下一级，叫做“顶级域名”（top-level domain，缩写为TLD），比如.com、.net、.me；再下一级叫做“次级域名”（second-level domain，缩写为SLD），比如www.example.com里面的.example，这一级域名是用户可以注册的；再下一级是主机名（host），比如www.example.com里面的www，又称为“三级域名”，这是用户在自己的域名里面为服务器分配的名字，是用户可以任意分配的。</p>
<p>总结一下，域名的层级结构如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">主机名.次级域名.顶级域名.根域名</div><div class="line">即</div><div class="line">host.sld.tld.root</div></pre></td></tr></table></figure>
<h1 id="五-根域名服务器"><a href="#五、根域名服务器" class="headerlink" title="五、根域名服务器"></a>五、根域名服务器</h1><p>DNS服务器根据域名的层次，进行分级查询。</p>
<p>需要明确的是，每一级域名都有自己的NS记录，NS记录指向该级域名服务器。这些服务器知道下一级域名的各种记录。</p>
<p>所谓’分级查询’，就是从根域名开始，依次查询每一级域名的NS记录，直到查到最终的IP地址，过程大致如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1.从’根域名服务器’查到’顶级域名服务器’的NS记录和A记录（IP地址）</div><div class="line">2.从’顶级域名服务器’查到’次级域名服务器’的NS记录和A记录（IP地址）</div><div class="line">3.从’次级域名服务器’查出’主机名’的IP地址</div></pre></td></tr></table></figure>
<p>仔细看上面的过程，没有提到DNS服务器怎么知道“根域名服务器”的IP地址。回答是“根域名服务器”的NS记录和IP地址一般是不会变化的，所以内置在DNS服务器里面。<br>世界上一共有13组根域名服务器，从A.ROOT-SERVERS.NET一直到M.ROOT-SERVERS.NET</p>
<h1 id="六-分级查询的实例"><a href="#六、分级查询的实例" class="headerlink" title="六、分级查询的实例"></a>六、分级查询的实例</h1><p>dig命令的+trace参数可以显示DNS的整个分级查询过程。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$dig +trace fengyao.me</div></pre></td></tr></table></figure>
<p>上面命令的第一段列出根域名.的所有NS记录，即所有根域名服务器。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">; &lt;&lt;&gt;&gt; DiG 9.8.3-P1 &lt;&lt;&gt;&gt; +trace fengyao.me</div><div class="line">;; global options: +cmd</div><div class="line">.            51457    IN    NS    h.root-servers.net.</div><div class="line">.            51457    IN    NS    a.root-servers.net.</div><div class="line">.            51457    IN    NS    m.root-servers.net.</div><div class="line">.            51457    IN    NS    e.root-servers.net.</div><div class="line">.            51457    IN    NS    f.root-servers.net.</div><div class="line">.            51457    IN    NS    c.root-servers.net.</div><div class="line">.            51457    IN    NS    k.root-servers.net.</div><div class="line">.            51457    IN    NS    l.root-servers.net.</div><div class="line">.            51457    IN    NS    g.root-servers.net.</div><div class="line">.            51457    IN    NS    d.root-servers.net.</div><div class="line">.            51457    IN    NS    i.root-servers.net.</div><div class="line">.            51457    IN    NS    j.root-servers.net.</div><div class="line">.            51457    IN    NS    b.root-servers.net.</div><div class="line">;; Received 496 bytes from 192.168.3.1#53(192.168.3.1) in 80 ms</div></pre></td></tr></table></figure>
<p>根据内置的根域名服务器IP地址，DNS服务器向所有这些IP地址发出查询请求，询问fengyao.me的顶级域名服务器me.的NS记录。最先回复的根域名服务器将被缓存，以后只向这台服务器发请求。</p>
<p>接着是第二段：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">me.            172800    IN    NS    a0.cctld.afilias-nst.info.</div><div class="line">me.            172800    IN    NS    a2.me.afilias-nst.info.</div><div class="line">me.            172800    IN    NS    b0.cctld.afilias-nst.org.</div><div class="line">me.            172800    IN    NS    b2.me.afilias-nst.org.</div><div class="line">me.            172800    IN    NS    c0.cctld.afilias-nst.info.</div><div class="line">me.            172800    IN    NS    d0.cctld.afilias-nst.org.</div><div class="line">me.            172800    IN    NS    ns.nic.me.</div><div class="line">me.            172800    IN    NS    ns2.nic.me.</div><div class="line">;; Received 486 bytes from 198.97.190.53#53(198.97.190.53) in 468 ms</div></pre></td></tr></table></figure>
<p>上面的结果显示.me域名有8条NS记录，同时返回的还有每一条记录对应的IP地址。</p>
<p>然后，DNS服务器向这些顶级域名发出查询请求，询问fengyao.me的次级域名fengyao.me的NS记录。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fengyao.me.        86400    IN    NS    dns9.hichina.com.</div><div class="line">fengyao.me.        86400    IN    NS    dns10.hichina.com.</div><div class="line">;; Received 78 bytes from 89.188.44.44#53(89.188.44.44) in 324 ms</div></pre></td></tr></table></figure>
<p>上面的结果显示fengyao.me有两条NS记录，同时返回的还有每一条NS记录对应的IP地址。</p>
<p>然后，DNS服务器向这两台NS服务器查询fengyao.me的主机名。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fengyao.me.        600    IN    A    192.30.252.154</div><div class="line">fengyao.me.        600    IN    A    192.30.252.153</div><div class="line">;; Received 60 bytes from 140.205.228.13#53(140.205.228.13) in 4 ms</div></pre></td></tr></table></figure>
<p>上面的结果显示，fengyao.me有两条A记录，即这两个IP地址都可以访问到网站，并且还表示，最先返回结果的NS服务器是140.205.228.13。</p>
<h1 id="七-ns记录的查询"><a href="#七、NS记录的查询" class="headerlink" title="七、NS记录的查询"></a>七、NS记录的查询</h1><p>dig命令可以单独查看每一级域名的NS记录。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$dig ns me</div><div class="line">$dig ns fengyao.me</div></pre></td></tr></table></figure>
<p>+short参数可以显示简化的结果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ dig +short ns me</div><div class="line">$ dig +short ns fengyao.me</div></pre></td></tr></table></figure>
<h1 id="八-dns的记录类型"><a href="#八、DNS的记录类型" class="headerlink" title="八、DNS的记录类型"></a>八、DNS的记录类型</h1><p>域名与IP之间的对应关系，成为’记录’（record）。根据使用场景，“记录”可以分为不同的类型（type），前面已经看到了A记录和NS记录。</p>
<p>常见的DNS记录类型如下；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">（1）A：地址记录（Address），返回域名指向的IP地址。</div><div class="line">（2）NS：域名服务器记录（Name Server），返回保存下一级域名信息的服务器地址。该记录只能设置为域名，不能设置为IP地址。</div><div class="line">（3）MX：邮件记录（Mail eXchange），返回接收电子邮件的服务器地址。</div><div class="line">（4）CNAME：规范名称记录（Canonical Name），返回另一个域名，即当前查询的域名是另一个域名的跳转，详见下页。</div><div class="line">（5）PRT：逆向查询记录（Pointer Record），只用于从IP地址查询域名，详见下页。</div></pre></td></tr></table></figure>
<p>一般来说，为了服务的安全可靠，至少应该有两条NS记录，而A记录和MX记录也可能有多条，这样就提供了服务的冗余性，防止出现单点失败。</p>
<p>CNAME记录主要用于域名的内部跳转，为服务器配置提供灵活性，用户感知不到。举例来说，yaoelvon.github.io这个域名就是一个CNAME记录。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$ dig yaoelvon.github.io</div><div class="line"></div><div class="line">; &lt;&lt;&gt;&gt; DiG 9.8.3-P1 &lt;&lt;&gt;&gt; yaoelvon.github.io</div><div class="line">;; global options: +cmd</div><div class="line">;; Got answer:</div><div class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 8518</div><div class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 3, AUTHORITY: 0, ADDITIONAL: 0</div><div class="line"></div><div class="line">;; QUESTION SECTION:</div><div class="line">;yaoelvon.github.io.        IN    A</div><div class="line"></div><div class="line">;; ANSWER SECTION:</div><div class="line">yaoelvon.github.io.    3600    IN    CNAME    github.map.fastly.net.</div><div class="line">github.map.fastly.net.    3600    IN    CNAME    prod.github.map.fastlylb.net.</div><div class="line">prod.github.map.fastlylb.net. 3600 IN    A    151.101.100.133</div><div class="line"></div><div class="line">;; Query time: 768 msec</div><div class="line">;; SERVER: 192.168.3.1#53(192.168.3.1)</div><div class="line">;; WHEN: Sun Jul 17 15:31:48 2016</div><div class="line">;; MSG SIZE  rcvd: 126</div></pre></td></tr></table></figure>
<p>上面结果显示，yaoelvon.github.io的CNAME指向github.map.fastly.net。也就是说，用户查询yaoelvon.github.io的时候，实际上返回的是github.map.fastly.net的IP地址。这样的好处是，变更服务器IP时，只要修改github.map.fastly.net这个域名就可以了，用户的yaoelvon.github.io域名不用修改。</p>
<p>由于CNAME记录就是一个替换，所以域名一旦设置CNAME记录后，就不能再设置其他记录了（比如A记录和MX记录），这是为了防止产生冲突。举例来说，foo.com指向bar.com，而两个域名各有自己的MX记录，如果两者不一致，就会产生问题。由于顶级域名通常要设置MX记录，所以一般不允许用户对顶级域名设置CNAME记录。</p>
<p>PTR记录用于从IP地址反查域名。dig命令的-x参数用于查询PTR记录。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dig -x 192.30.252.153</div><div class="line">...</div><div class="line">;; ANSWER SECTION:</div><div class="line">153.252.30.192.in-addr.arpa. 3600 IN    PTR    pages.github.com.</div></pre></td></tr></table></figure>
<p>上面的结果显示，192.30.252.153这台服务器的域名是pages.github.com。</p>
<p>逆向查询的一个应用，是可以防止垃圾邮件，即验证发送邮件的IP地址，是否真的有他所声称的域名。</p>
<p>dig命令可以查看指定的记录类型。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ dig a github.com</div><div class="line">$ dig ns github.com</div><div class="line">$ dig mx github.com</div></pre></td></tr></table></figure>
<h1 id="九-其他dns工具"><a href="#九、其他DNS工具" class="headerlink" title="九、其他DNS工具"></a>九、其他DNS工具</h1><p>除了dig，还有一些其他的小工具可以使用。<br>（1）host命令<br>host命令可以看做dig命令的简化版本，返回当前请求域名的各种记录。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ host fengyao.me</div><div class="line">fengyao.me has address 192.30.252.154</div><div class="line">fengyao.me has address 192.30.252.153</div><div class="line">fengyao.me mail is handled by 10 mxw.mxhichina.com.</div><div class="line">fengyao.me mail is handled by 10 mxn.mxhichina.com.</div></pre></td></tr></table></figure>
<p>host也可用于逆向查询，即从IP地址查询域名，等同于dig -x <ip>。</ip></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ host 192.30.252.153</div><div class="line">153.252.30.192.in-addr.arpa domain name pointer pages.github.com.</div></pre></td></tr></table></figure>
<p>（2）nslookup命令<br>nslookup命令用于互动式地查询域名记录。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ nslookup</div><div class="line">&gt; fengyao.me</div><div class="line">Server:        192.168.3.1</div><div class="line">Address:    192.168.3.1#53</div><div class="line"></div><div class="line">Non-authoritative answer:</div><div class="line">Name:    fengyao.me</div><div class="line">Address: 192.30.252.154</div><div class="line">Name:    fengyao.me</div><div class="line">Address: 192.30.252.153</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<p>（3）whois命令<br>whois命令用来查询域名的注册情况。</p>
<h1 id="十-参考"><a href="#十、参考" class="headerlink" title="十、参考"></a>十、参考</h1><ol>
<li><a href="http://www.ruanyifeng.com/blog/2016/06/dns.html" target="_blank" rel="external">DNS原理入门–阮一峰</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DNS是互联网核心协议之一。&lt;/p&gt;
&lt;h1 id=&quot;一-dns是什么&quot;&gt;&lt;a href=&quot;#一、DNS是什么？&quot; class=&quot;headerlink&quot; title=&quot;一、DNS是什么？&quot;&gt;&lt;/a&gt;一、DNS是什么？&lt;/h1&gt;&lt;p&gt;DNS（Domain Name Syste
    
    </summary>
    
      <category term="NET" scheme="http://yaofeng.org/categories/NET/"/>
    
    
      <category term="DNS" scheme="http://yaofeng.org/tags/DNS/"/>
    
  </entry>
  
  <entry>
    <title>在flask中如何使用jinja2中的Flash来进行提示</title>
    <link href="http://yaofeng.org/2016/06/22/how-to-use-flash-to-prompt-in-the-flash-jinja2/"/>
    <id>http://yaofeng.org/2016/06/22/how-to-use-flash-to-prompt-in-the-flash-jinja2/</id>
    <published>2016-06-22T15:04:19.000Z</published>
    <updated>2017-05-06T09:47:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jinja2模板中的写法"><a href="#jinja2模板中的写法" class="headerlink" title="jinja2模板中的写法"></a>jinja2模板中的写法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;%- with messages = get_flashed_messages(with_categories=true) -%&#125;</div><div class="line">&#123;%- if messages -%&#125;</div><div class="line">    &#123;%- for category, message in messages -%&#125;</div><div class="line">        &lt;div class=&quot;alert alert-&#123;&#123; category &#125;&#125;&quot;&gt;</div><div class="line">            &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot;&gt;&amp;times;&lt;/button&gt;</div><div class="line">            &#123;&#123; message &#125;&#125;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &#123;%- endfor -%&#125;</div><div class="line">&#123;%- endif -%&#125;</div></pre></td></tr></table></figure>
<h1 id="调用方式"><a href="#调用方式" class="headerlink" title="调用方式"></a>调用方式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">flash(&quot;用户名已存在&quot;, category=&apos;warning&apos;)</div><div class="line">flash(&quot;注册成功&quot;, category=&apos;success&apos;)</div></pre></td></tr></table></figure>
<p>category可选：’message’、’error’、’info’、’warning’、’success’</p>
<p>参考：</p>
<ol>
<li><a href="http://stackoverflow.com/questions/18396936/flask-flash-function-ignoring-the-category-argument" target="_blank" rel="external">Flash</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;jinja2模板中的写法&quot;&gt;&lt;a href=&quot;#jinja2模板中的写法&quot; class=&quot;headerlink&quot; title=&quot;jinja2模板中的写法&quot;&gt;&lt;/a&gt;jinja2模板中的写法&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
    
    </summary>
    
      <category term="flask" scheme="http://yaofeng.org/categories/flask/"/>
    
      <category term="jinja2" scheme="http://yaofeng.org/categories/flask/jinja2/"/>
    
    
      <category term="flask" scheme="http://yaofeng.org/tags/flask/"/>
    
      <category term="jinja2" scheme="http://yaofeng.org/tags/jinja2/"/>
    
  </entry>
  
  <entry>
    <title>Flask-SQLALchemy动态的filter_by和filter</title>
    <link href="http://yaofeng.org/2016/06/05/Flask-SQLALchemy-dynamic-filter-by-and-filter/"/>
    <id>http://yaofeng.org/2016/06/05/Flask-SQLALchemy-dynamic-filter-by-and-filter/</id>
    <published>2016-06-05T02:16:29.000Z</published>
    <updated>2017-05-06T09:47:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1filter_by"><a href="#1-filter-by" class="headerlink" title="1.filter_by"></a>1.filter_by</h1><p>filter_by用于查询简单的列名，不支持比较运算符。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">filters = &#123;’name&apos;: ‘fengyao&apos;, ‘age&apos;: 26&#125;</div><div class="line">User.query.filter_by(**filters).first()</div></pre></td></tr></table></figure></p>
<h1 id="2filter"><a href="#2-filter" class="headerlink" title="2.filter"></a>2.filter</h1><p>比filter<em>by的功能更强大，支持比较运算符，支持or</em>、in_等语法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filters = &#123;</div><div class="line">     User.name == ‘fengyao’,</div><div class="line">     User.age &gt; 25</div><div class="line">&#125;</div><div class="line">User.query.filter(*filters).first()</div></pre></td></tr></table></figure></p>
<p>参考：<br>1.<a href="http://stackoverflow.com/questions/29885879/sqlalchemy-dynamic-filter-by" target="_blank" rel="external">SQLALchemy dynamic filter_by</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1filter_by&quot;&gt;&lt;a href=&quot;#1-filter-by&quot; class=&quot;headerlink&quot; title=&quot;1.filter_by&quot;&gt;&lt;/a&gt;1.filter_by&lt;/h1&gt;&lt;p&gt;filter_by用于查询简单的列名，不支持比较运算符。&lt;br&gt;&lt;fi
    
    </summary>
    
      <category term="python" scheme="http://yaofeng.org/categories/python/"/>
    
    
      <category term="Flask-SQLAlchemy" scheme="http://yaofeng.org/tags/Flask-SQLAlchemy/"/>
    
  </entry>
  
  <entry>
    <title>使用Github SSH Key来避免Hexo部署时输入账户密码</title>
    <link href="http://yaofeng.org/2016/04/10/use-git-ssh-key-carry-hexo-deploy/"/>
    <id>http://yaofeng.org/2016/04/10/use-git-ssh-key-carry-hexo-deploy/</id>
    <published>2016-04-10T15:05:07.000Z</published>
    <updated>2016-04-10T15:05:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>当hexo使用https方式连接Github时，每次执行hexo deploy都会提示你输入账户和密码，不胜其烦。下面使用ssh连接方式可以免除每次输入账户密码的过程，而且安全可靠。如何使用github请看参考2。</p>
<h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><p>修改_config.yml，将部署方式从https方式修改为ssh方式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: https://github.com/yaoelvon/yaoelvon.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>修改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: git@github.com:yaoelvon/yaoelvon.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>参考：</p>
<ol>
<li><a href="https://xuanwo.org/2015/02/07/generate-a-ssh-key/" target="_blank" rel="external">使用Github SSH Key以免去Hexo部署时输入密码</a></li>
<li><a href="https://ggssxx.com/git-ssh.html" target="_blank" rel="external">Git使用ssh协议授权</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;当hexo使用https方式连接Github时，每次执行hexo deploy都会提示你输入账户和密码，不胜其烦。下面使用ssh连接方式可以
    
    </summary>
    
      <category term="hexo" scheme="http://yaofeng.org/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yaofeng.org/tags/hexo/"/>
    
      <category term="git" scheme="http://yaofeng.org/tags/git/"/>
    
      <category term="ssh" scheme="http://yaofeng.org/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>个人博客计划</title>
    <link href="http://yaofeng.org/2016/04/03/my-blog-plan/"/>
    <id>http://yaofeng.org/2016/04/03/my-blog-plan/</id>
    <published>2016-04-03T09:52:22.000Z</published>
    <updated>2016-04-04T14:16:22.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>从去年3月份开始，我就有了建设个人技术博客的想法。那时候，我是一个linux C嵌入式程序员。现在，已经成了一个初级全栈WEB程序员。不仅能用AngularJS写点前端代码，而且能用Python的Flask框架编写后端服务器代码。虽然现在我自认为还是一个菜鸟，但是为了成为技术大牛的梦想，我选择自己搭建一个技术博客。<br>在建设个人技术博客的过程中，需要考虑两件事：</p>
<blockquote>
<ul>
<li>选择什么样的域名？</li>
<li>博客用什么方式搭建？</li>
</ul>
</blockquote>
<hr>
<h2 id="选择什么样的域名"><a href="#选择什么样的域名" class="headerlink" title="选择什么样的域名"></a>选择什么样的域名</h2><p>在选择域名方面，我相信很多人都纠结过。当然，我也是。刚开始我是想以自己名字的拼音注册域名的，但是fengyao.com和fengyao.cn都已经被注册了。然后就选择了我的网名，所以注册了yaoelvon.com。后来又觉得不好记。所以在不到一个月内，我注册了4个域名，分别是：yaoelvon.com、lessb.com、ipyjs.com和vincent.net.cn。下面是各个域名的优缺点。</p>
<blockquote>
<ul>
<li>yaoelvon 优点：我的网名、github账号、gmail账号；缺点：难记</li>
<li>lessb 优点：好记，可解释为lessbutbetter；缺点：sb</li>
<li>ipyjs 优点：爱python javascript 缺点：面窄</li>
<li>vincent 优点：好记，英文名，冯申特 缺点：以.net.cn结尾</li>
</ul>
<p>对于域名，我leader的建议是：重内容，轻域名。我网名注册的域名就挺好的。做公司才会对域名比较看重。我深以为然，但还是注册了好多域名。留着以后用吧。</p>
<p>另外可选的域名有：fengyao.me, 注册fengyao.me并使用。</p>
<p>2016/10/04 更换本博客的域名为yaofeng.org，并改名为【冯尧的博客】。<br>2016/10/04 更换本博客的域名为yaoel.com。</p>
</blockquote>
<hr>
<h2 id="博客用什么方式搭建"><a href="#博客用什么方式搭建" class="headerlink" title="博客用什么方式搭建"></a>博客用什么方式搭建</h2><p>据我所知，可以使用wordpress、jekll、hexo等方式建立博客。我没有使用过wordpress，所以不予评价。尝试过jekll，觉得不太好用。后来发现hexo挺好用的，而且zippera的博文写的很好，折腾了几次后，终于使用hexo将自己的博客搭建起来了。然而，使用hexo只是我搭建博客的第一步。我会逐渐对博客进行修改和重建。<br>按照个人想法，最终决定将博客的建设分成4个阶段进行，这四个阶段都有代号，分别是：<strong>Monkey</strong>、<strong>Horse</strong>、<strong>Lion</strong>和<strong>Ape</strong>。<br>下面是粗劣的设计方向：</p>
<p><strong>step1: Monkey</strong><br>Monkey，意思是猴子，特点：灵巧。<br>技术：使用hexo来实现，上线快，部署快，容易上手。<br>参考：主要参考了Zippera的博文,在此对他表示感谢。</p>
<p><strong>step2: Horse</strong><br>Horse，意思是马，特点：健壮。<br>技术：使用Flask和Jinja实现，前端和服务器一体。<br>参考：主要参考Flask Web开发。</p>
<p><strong>step3: Lion</strong><br>Lion，意思是狮子。<br>技术：前端改用AngularJS实现，后端使用Flask。<br>参考：流程大致跟当前做的项目相同，参考当前项目。</p>
<p><strong>step4: Ape</strong><br>Ape，意思是猿，特点：聪明。（人猿星球出现在了我当前的脑海中）<br>技术：AngularJS2.x或React做前端，后端使用Flask。<br>参考：还没想好，待续。</p>
<hr>
<h2 id="时间计划"><a href="#时间计划" class="headerlink" title="时间计划"></a>时间计划</h2><p>下面是粗略的时间计划表：</p>
<table>
<thead>
<tr>
<th style="text-align:center">时间</th>
<th style="text-align:center">代号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">2016/4/1-2016/5/31</td>
<td style="text-align:center">Monkey</td>
</tr>
<tr>
<td style="text-align:center">2016/6/1-2016/8/31</td>
<td style="text-align:center">Horse</td>
</tr>
<tr>
<td style="text-align:center">2016/9/1-2016/12/31</td>
<td style="text-align:center">Lion</td>
</tr>
<tr>
<td style="text-align:center">2017/1/1-2017/??/??</td>
<td style="text-align:center">Ape</td>
</tr>
</tbody>
</table>
<p>详细的计划会在独立的博文中出现。</p>
<p>fengyao</p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;从去年3月份开始，我就有了建设个人技术博客的想法。那时候，我是一个linux C嵌入式程序员。现在，已经成了一个初级全栈WEB程序员。不仅能用AngularJS写点前端代码，而且能用Python的Flask框架编写后端服务器代码。虽然现在我自认为还是一个菜鸟，但是
    
    </summary>
    
      <category term="BlogPlan" scheme="http://yaofeng.org/categories/BlogPlan/"/>
    
    
      <category term="博客计划" scheme="http://yaofeng.org/tags/%E5%8D%9A%E5%AE%A2%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
</feed>
